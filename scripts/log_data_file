#!/usr/bin/env perl
use strict;
use warnings;

use Scalar::Util qw( looks_like_number );
use File::Basename;
use POSIX; # replace with log(10) for speed
use Getopt::Long;
use Pod::Usage;

our $VERSION = '0.001';

my $man = 0;
my $help = 0;
my @linear = ();

GetOptions('help|?' => \$help, man => \$man, 'linear=i{1,}' => \@linear) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitval => 0, -verbose => 2) if $man;

my @files = @ARGV;

# Maybe do this later.
#sub make_out_fname {
#    my ($infn) = @_;
#    $infn =~ s/
#}

sub make_output_fname {
    my ($infname) = @_;
    my ($name,$path,$suffix) = fileparse($infname);
    return $path . 'log_' . $name . $suffix;
}

sub process_one {
    my ($infilen) = @_;
    open my $ifh, '<', $infilen or die "Can't open '$infilen' for reading.";
    my $outfilen = make_output_fname($infilen);
    open my $ofh, '>', $outfilen or die "Can't open '$outfilen' for writing.";
    while (<$ifh>) {
        my @fields = split;
        my $nonum = 0;
        foreach my $f (@fields) {
            if ( ! looks_like_number($f) ) {
                $nonum = 1;
                last;
            }
        }
        if ( 0 == $nonum ) {
            print_numbers_line($ofh, \@fields);
        }
        else {
            print $ofh $_;
        }
    }
    close($ifh);
    close($ofh);
}

sub print_numbers_line {
    my ($ofh,$fields) = @_;
    if (@linear) {
        my $j = 0;
        for (my $i=0; $i < @$fields; $i++) {
            if ( $j< @linear && $i == $linear[$j] ) {
                print $ofh $$fields[$i];
                $j++;
            }
            else {
                print $ofh log10($$fields[$i]);
            }
            print $ofh " " if $i < @$fields - 1;
        }
    }
    else {
        for (my $i=0; $i < @$fields; $i++) {
            print $ofh log10($$fields[$i]);
            print $ofh " " if $i < @$fields - 1;
        }
    }
    print $ofh "\n";
}

sub process_one_simple {
    while (<>) {
        my @fields = split;
        my $nonum = 0;
        foreach my $f (@fields) {
            if ( ! looks_like_number($f) ) {
                $nonum = 1;
                last;
            }
        }
        if ( 0 == $nonum ) {
            print_numbers_line(*STDOUT, \@fields);
        }
        else {
             print;
        }
    }
}

sub set_linear_indices () {
    @linear = sort {$a <=> $b} @linear;
    foreach (@linear) { $_ -= 1; } # convert to array indices
}

set_linear_indices() if @linear;

if ( @files > 0 ) {
    foreach my $file (@files) {
        print make_output_fname($file), "\n";
        process_one($file);
    }
}
else {
    process_one_simple();
}

__END__

=head1 NAME

I<log_data_file> - Read data file and write the same file taking log10 of all numbers in data records

=head1 SYNOPSIS

Log is only taken on fields in records that appear to consist of all numbers.
Any line including non numeric characters is printed as read.

Convert a single file from linear to log-log

 log_data_file < linearfile.dat > logfile.dat

Convert one or more files path1/infile1, path2/infile2, ...
Name the output files path1/log_infile1, path2/log_infile2, ...

 log_data_file path1/infile1 path2/infile2 ...

Print logarithm of all columns except columns 1 and 3, which are printed as read.

 log_data_file --linear 1 3 infile1

=head1 DESCRIPTION

For each line for which every field is a number, print a line consisting of
the log base 10 of each field. Fields are separated by a single space. All
other lines are copied to the output.

=head1 OPTIONS

=over 4

=item B<--help>

Print short help.

=item B<--man>

Print the man page.

=item B<--linear> I<n1> I<n2> ...

A list of indices of fields (ie column numbers) to print without processing, rather than
taking the logarithm. The first column is numbered 1. For example, if there
are three columns of numbers, B<--linear> 1 2, will print columns 1 and
2 as read, and the log of column 3.

=back

=head1 AUTHOR

John Lapeyre

=head1 LICENSE

Copyright 2014 John Lapeyre.

This program is free software; you can redistribute it and/or modify
it under the terms of either: the GNU General Public License as
published by the Free Software Foundation; or the Artistic License.

=cut
